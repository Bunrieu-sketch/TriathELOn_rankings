female_race_df <- read_csv(paste0("../data/",year,"_races/races_clean/",race,"_female.csv"),
col_types = cols())
male_ovo_df <- read_csv(paste0("../data/",year,"_races/ovo_races/",race,"_male.csv"),
col_types = cols())
female_ovo_df <- read_csv(paste0("../data/",year,"_races/ovo_races/",race,"_female.csv"),
col_types = cols())
male_tuple <- list(male_race_df, male_ovo_df)
female_tuple <- list(female_race_df, female_ovo_df)
male_races[[length(male_races)+1]] <-  male_tuple
female_races[[length(female_races)+1]] <- female_tuple
#index <- index + 1
}
}
length(female_races)
calendar <- list("2009" = c("Tongyeong", "Madrid", "DC", "Kitzbuehel", "Hamburg", "London", "Yokohama", "Coast"),
"2010" = c("Sydney", "Seoul", "Madrid", "Hamburg", "London", "Kitzbuehel", "Budapest"),
"2011" = c("Sydney", "Madrid", "Kitzbuehel", "Hamburg", "London", "Championships", "Beijing", "Yokohama"),
"2012" = c("Sydney", "Diego", "Madrid", "Kitzbuehel", "Hamburg", "Stockholm", "Yokohama", "Auckland"),
"2013" = c("Auckland", "Diego", "Yokohama", "Madrid", "Kitzbuehel", "Hamburg", "Stockholm", "London"),
"2014" = c("Auckland", "Town", "Yokohama", "London", "Chicago", "Hamburg", "Stockholm", "Edmonton"),
"2015" = c("Dhabi", "Auckland", "Coast", "Town", "Yokohama", "London", "Hamburg", "Stockholm", "Edmonton", "Chicago"),
"2016" = c("Dhabi", "Coast", "Town", "Yokohama", "Leeds", "Stockholm", "Hamburg", "Edmonton", "Cozumel"),
"2017" = c("Dhabi", "Coast", "Yokohama", "Leeds", "Hamburg", "Edmonton", "Montreal", "Stockholm", "Rotterdam"),
"2018" = c("Dhabi", "Bermuda", "Yokohama", "Leeds", "Edmonton", "Montreal", "Coast"),
"2019" = c("Dhabi", "Bermuda", "Yokohama", "Leeds", "Montreal", "Hamburg"))
years <- names(calendar)
male_races <- list()
female_races <- list()
#index <- 1
for (i in seq_along(calendar)){
year <- as.numeric(years[i])
series <- calendar[[i]]
for (race in series){
male_race_df <- read_csv(paste0("../data/",year,"_races/races_clean/",race,"_male.csv"),
col_types = cols())
female_race_df <- read_csv(paste0("../data/",year,"_races/races_clean/",race,"_female.csv"),
col_types = cols())
male_ovo_df <- read_csv(paste0("../data/",year,"_races/ovo_races/",race,"_male.csv"),
col_types = cols())
female_ovo_df <- read_csv(paste0("../data/",year,"_races/ovo_races/",race,"_female.csv"),
col_types = cols())
male_tuple <- list(male_race_df, male_ovo_df)
female_tuple <- list(female_race_df, female_ovo_df)
male_races[[length(male_races)+1]] <-  male_tuple
female_races[[length(female_races)+1]] <- female_tuple
#index <- index + 1
}
}
### Find optimal level of C
c_vec <- seq(2, 20, by=2)
# Period incrementer for races
average_results_male <- data.frame(matrix(NA, nrow = length(c_vec), ncol = 2))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# keep track of glicko's and of R^2 values
correlation_tracker <- rep(NA, length(races))
r2_tracker <- rep(NA, length(races))
# iterate through each race in the series
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update_2(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
r2_tracker[period-1] <- update[[4]]
}
# Find the average kendall's tau at that level of C
average_results_male[iterator,1] <- correlation_tracker %>% mean()
# Find the average R2 at that level of C
average_results_male[iterator,2] <- r2_tracker %>% mean()
iterator <- iterator + 1
}
### Find optimal level of C
c_vec <- seq(2, 20, by=2)
# Period incrementer for races
average_results_male <- data.frame(matrix(NA, nrow = length(c_vec), ncol = 2))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# keep track of glicko's and of R^2 values
correlation_tracker <- rep(NA, length(male_races))
r2_tracker <- rep(NA, length(male_races))
# iterate through each race in the series
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update_2(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
r2_tracker[period-1] <- update[[4]]
}
# Find the average kendall's tau at that level of C
average_results_male[iterator,1] <- correlation_tracker %>% mean()
# Find the average R2 at that level of C
average_results_male[iterator,2] <- r2_tracker %>% mean()
iterator <- iterator + 1
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(PlayerRatings)
source("../src/utils.R")
### Find optimal level of C
c_vec <- seq(2, 20, by=2)
# Period incrementer for races
average_results_male <- data.frame(matrix(NA, nrow = length(c_vec), ncol = 2))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# keep track of glicko's and of R^2 values
correlation_tracker <- rep(NA, length(male_races))
r2_tracker <- rep(NA, length(male_races))
# iterate through each race in the series
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
r2_tracker[period-1] <- update[[4]]
}
# Find the average kendall's tau at that level of C
average_results_male[iterator,1] <- correlation_tracker %>% mean()
# Find the average R2 at that level of C
average_results_male[iterator,2] <- r2_tracker %>% mean()
iterator <- iterator + 1
}
results_summary_male <- tibble(c = c_vec, average_kendall_tau = average_results_male[[1]],
average_R_squared = average_results_male[[2]])
results_summary_male
results_summary_male
### Find optimal level of C
average_results_female <- data.frame(matrix(NA, nrow = length(c_vec), ncol = 2))
# Period incrementer for races
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race
first_race_female <- female_races[[1]][2]
glicko <- glicko_ratings(first_race_female)
rankings_df <- updated_rankings(glicko)
# keep track of glicko's and of R^2 values
correlation_tracker <- rep(NA, length(female_races))
r2_tracker <- rep(NA, length(female_races))
# iterate through each race in the series
for (race in female_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update_2(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
r2_tracker[period-1] <- update[[4]]
}
# Find the average kendall's tau at that level of C
average_results_female[iterator,1] <- correlation_tracker %>% mean()
# Find the average R2 at that level of C
average_results_female[iterator,2] <- r2_tracker %>% mean()
iterator <- iterator + 1
}
### Find optimal level of C
average_results_female <- data.frame(matrix(NA, nrow = length(c_vec), ncol = 2))
# Period incrementer for races
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race
first_race_female <- female_races[[1]][2]
glicko <- glicko_ratings(first_race_female)
rankings_df <- updated_rankings(glicko)
# keep track of glicko's and of R^2 values
correlation_tracker <- rep(NA, length(female_races))
r2_tracker <- rep(NA, length(female_races))
# iterate through each race in the series
for (race in female_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
r2_tracker[period-1] <- update[[4]]
}
# Find the average kendall's tau at that level of C
average_results_female[iterator,1] <- correlation_tracker %>% mean()
# Find the average R2 at that level of C
average_results_female[iterator,2] <- r2_tracker %>% mean()
iterator <- iterator + 1
}
results_summary_female <- tibble(c = c_vec, average_kendall_tau = average_results_female[[1]],
average_R_squared = average_results_female[[2]])
results_summary_female
# Track the kendall's tau between both approaches
tau_glicko_male <- rep(NA, length(races))
# Track the kendall's tau between both approaches
tau_glicko_male <- rep(NA, length(male_races))
tau_itu_male <- rep(NA, length(male_races))
r2_glicko_male <- rep(NA, length(female_races))
r2_itu_male <- rep(NA, length(female_races))
# reset glicko and correlations
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# iterate through each race
count <- 1
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in optimal value of C
update <- race_update_2(glicko, rankings_df, race_df, race_ovo, c = best_c_male)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko_male[count] <- update[[3]]
r2_glicko_male[count] <- update[[4]]
tau_itu_male[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
if (race_df %>% select(start_number) %>% unique() %>% pull() %>% length() > 1) {
r2_itu_male[count] <- summary(lm(race_df$position~race_df$start_number))$adj.r.squared
}
count <- count + 1
}
# Track the kendall's tau between both approaches
tau_glicko_male <- rep(NA, length(male_races))
tau_itu_male <- rep(NA, length(male_races))
r2_glicko_male <- rep(NA, length(female_races))
r2_itu_male <- rep(NA, length(female_races))
# reset glicko and correlations
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# iterate through each race
count <- 1
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in optimal value of C
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c_male)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko_male[count] <- update[[3]]
r2_glicko_male[count] <- update[[4]]
tau_itu_male[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
if (race_df %>% select(start_number) %>% unique() %>% pull() %>% length() > 1) {
r2_itu_male[count] <- summary(lm(race_df$position~race_df$start_number))$adj.r.squared
}
count <- count + 1
}
best_c_female <- results_summary_female  %>% arrange(desc(average_R_squared)) %>% select(c) %>% head(1) %>% pull()
best_c_male <- results_summary_male  %>% arrange(desc(average_R_squared)) %>% select(c) %>% head(1) %>% pull()
# Track the kendall's tau between both approaches
tau_glicko_male <- rep(NA, length(male_races))
tau_itu_male <- rep(NA, length(male_races))
r2_glicko_male <- rep(NA, length(female_races))
r2_itu_male <- rep(NA, length(female_races))
# reset glicko and correlations
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# iterate through each race
count <- 1
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in optimal value of C
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c_male)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko_male[count] <- update[[3]]
r2_glicko_male[count] <- update[[4]]
tau_itu_male[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
if (race_df %>% select(start_number) %>% unique() %>% pull() %>% length() > 1) {
r2_itu_male[count] <- summary(lm(race_df$position~race_df$start_number))$adj.r.squared
}
count <- count + 1
}
# Track the kendall's tau between both approaches
tau_glicko_female <- rep(NA, length(races))
# Track the kendall's tau between both approaches
tau_glicko_male <- rep(NA, length(male_races))
tau_itu_male <- rep(NA, length(male_races))
r2_glicko_male <- rep(NA, length(female_races))
r2_itu_male <- rep(NA, length(female_races))
# reset glicko and correlations
first_race_male <- male_races[[1]][2]
glicko <- glicko_ratings(first_race_male)
rankings_df <- updated_rankings(glicko)
# iterate through each race
count <- 1
for (race in male_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in optimal value of C
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c_male)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko_male[count] <- update[[3]]
r2_glicko_male[count] <- update[[4]]
tau_itu_male[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
if (race_df %>% select(start_number) %>% unique() %>% pull() %>% length() > 1) {
r2_itu_male[count] <- summary(lm(race_df$position~race_df$start_number))$adj.r.squared
}
count <- count + 1
}
# Track the kendall's tau between both approaches
tau_glicko_female <- rep(NA, length(female_races))
tau_itu_female <- rep(NA, length(female_races))
r2_glicko_female <- rep(NA, length(female_races))
r2_itu_female <- rep(NA, length(female_races))
# reset glicko and correlations
first_race_female <- female_races[[1]][2]
glicko <- glicko_ratings(first_race_female)
rankings_df <- updated_rankings(glicko)
# iterate through each race
count <- 1
for (race in female_races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in optimal value of C
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c_female)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko_female[count] <- update[[3]]
r2_glicko_female[count] <- update[[4]]
tau_itu_female[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
if (race_df %>% select(start_number) %>% unique() %>% pull() %>% length() > 1) {
r2_itu_female[count] <- summary(lm(race_df$position~race_df$start_number))$adj.r.squared
}
count <- count + 1
}
year <- c(rep(2009, length(calendar$'2009')), rep(2010, length(calendar$'2010')), rep(2011, length(calendar$'2011')), rep(2012, length(calendar$'2012')),
rep(2013, length(calendar$'2013')), rep(2014, length(calendar$'2014')), rep(2015, length(calendar$'2015')), rep(2016, length(calendar$'2016')),
rep(2017, length(calendar$'2017')), rep(2018, length(calendar$'2018')), rep(2019, length(calendar$'2019')))
female_results <- tibble(r2_itu_female, r2_glicko_female, tau_itu_female, tau_glicko_female, year)
tidy_female <- female_results %>% gather("metric", "score", -year)
year_summaries_female <- tidy_female %>%
filter(year  > 2012)  %>%
group_by(year, metric) %>%
summarize(average_score = mean(score))
# create and display plots
r2_female <- year_summaries_female %>% filter(metric == "r2_glicko_female" | metric == "r2_itu_female")
kendall_female <- year_summaries_female %>% filter(metric == "tau_glicko_female" | metric == "tau_itu_female")
r2_plot_female <- ggplot(r2_female) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average R2",
title = "R2 comparisons between ITU rankings and glicko scores- Female")
kendall_plot_female <- ggplot(kendall_female) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average Kendall's Tau",
title = "Kendall's Tau comparisons between ITU rankings and glicko scores- Female")
grid.arrange(r2_plot_female, kendall_plot_female, nrow = 2)
year <- c(rep(2009, length(calendar$'2009')), rep(2010, length(calendar$'2010')), rep(2011, length(calendar$'2011')), rep(2012, length(calendar$'2012')),
rep(2013, length(calendar$'2013')), rep(2014, length(calendar$'2014')), rep(2015, length(calendar$'2015')), rep(2016, length(calendar$'2016')),
rep(2017, length(calendar$'2017')), rep(2018, length(calendar$'2018')), rep(2019, length(calendar$'2019')))
female_results <- tibble(r2_itu_female, r2_glicko_female, tau_itu_female, tau_glicko_female, year)
tidy_female <- female_results %>% gather("metric", "score", -year)
year_summaries_female <- tidy_female %>%
filter(year  > 2012)  %>%
group_by(year, metric) %>%
summarize(average_score = mean(score))
# create and display plots
r2_female <- year_summaries_female %>% filter(metric == "r2_glicko_female" | metric == "r2_itu_female")
kendall_female <- year_summaries_female %>% filter(metric == "tau_glicko_female" | metric == "tau_itu_female")
r2_plot_female <- ggplot(r2_female) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average R2",
title = "R2 comparisons between ITU rankings and glicko scores- Female")
kendall_plot_female <- ggplot(kendall_female) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average Kendall's Tau",
title = "Kendall's Tau comparisons between ITU rankings and glicko scores- Female")
grid.arrange(r2_plot_female, kendall_plot_female, nrow = 1)
male_results <- tibble(r2_itu_male, r2_glicko_male, tau_itu_male, tau_glicko_male, year)
tidy_male <- male_results %>% gather("metric", "score", -year)
year_summaries_male <- tidy_male %>%
filter(year  > 2012)  %>%
group_by(year, metric) %>%
summarize(average_score = mean(score))
# create and display plots
r2_male <- year_summaries_male %>% filter(metric == "r2_glicko_male" | metric == "r2_itu_male")
kendall_male <- year_summaries_male %>% filter(metric == "tau_glicko_male" | metric == "tau_itu_male")
r2_plot_male <- ggplot(r2_male) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average R2",
title = "R2 comparisons between ITU rankings and glicko scores- Male")
kendall_plot_male <- ggplot(kendall_male) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average Kendall's Tau",
title = "Kendall's Tau comparisons between ITU rankings and glicko scores- Male")
grid.arrange(r2_plot_male, kendall_plot_male, nrow = 2)
male_results <- tibble(r2_itu_male, r2_glicko_male, tau_itu_male, tau_glicko_male, year)
tidy_male <- male_results %>% gather("metric", "score", -year)
year_summaries_male <- tidy_male %>%
filter(year  > 2012)  %>%
group_by(year, metric) %>%
summarize(average_score = mean(score))
# create and display plots
r2_male <- year_summaries_male %>% filter(metric == "r2_glicko_male" | metric == "r2_itu_male")
kendall_male <- year_summaries_male %>% filter(metric == "tau_glicko_male" | metric == "tau_itu_male")
r2_plot_male <- ggplot(r2_male) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average R2",
title = "R2 comparisons between ITU rankings and glicko scores- Male")
kendall_plot_male <- ggplot(kendall_male) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average Kendall's Tau",
title = "Kendall's Tau comparisons between ITU rankings and glicko scores- Male")
grid.arrange(r2_plot_male, kendall_plot_male, nrow = 1)
m_itu_r2 <- tidy_male %>% filter(year > 2012 & metric == "r2_itu_male") %>% select(score) %>% pull() %>% mean()
m_glicko_r2 <- tidy_male %>% filter(year > 2012 & metric == "r2_glicko_male") %>% select(score) %>% pull() %>% mean()
m_itu_tau <- tidy_male %>% filter(year > 2012 & metric == "tau_itu_male") %>% select(score) %>% pull() %>% mean()
m_glicko_tau <- tidy_male %>% filter(year > 2012 & metric == "r2_glicko_male") %>% select(score) %>% pull() %>% mean()
m_itu_r2 <- tidy_male %>% filter(year > 2012 & metric == "r2_itu_male") %>% select(score) %>% pull() %>% mean()
m_glicko_r2 <- tidy_male %>% filter(year > 2012 & metric == "r2_glicko_male") %>% select(score) %>% pull() %>% mean()
m_itu_tau <- tidy_male %>% filter(year > 2012 & metric == "tau_itu_male") %>% select(score) %>% pull() %>% mean()
m_glicko_tau <- tidy_male %>% filter(year > 2012 & metric == "r2_glicko_male") %>% select(score) %>% pull() %>% mean()
f_itu_r2 <- tidy_female %>% filter(year > 2012 & metric == "r2_itu_male") %>% select(score) %>% pull() %>% mean()
f_glicko_r2 <- tidy_female %>% filter(year > 2012 & metric == "r2_glicko_male") %>% select(score) %>% pull() %>% mean()
f_itu_tau <- tidy_female %>% filter(year > 2012 & metric == "tau_itu_male") %>% select(score) %>% pull() %>% mean()
f_glicko_tau <- tidy_female %>% filter(year > 2012 & metric == "r2_glicko_male") %>% select(score) %>% pull() %>% mean()
tidy_male %>%
filter(year > 2012) %>%
group_by(metric) %>%
summarise(mean_metric = mean(score))
tidy_female %>%
filter(year > 2012) %>%
group_by(metric) %>%
summarise(mean_metric = mean(score))
tidy_female %>%
filter(year > 2012) %>%
group_by(metric) %>%
summarise(mean_metric = mean(score))
year <- c(rep(2009, length(calendar$'2009')), rep(2010, length(calendar$'2010')), rep(2011, length(calendar$'2011')), rep(2012, length(calendar$'2012')),
rep(2013, length(calendar$'2013')), rep(2014, length(calendar$'2014')), rep(2015, length(calendar$'2015')), rep(2016, length(calendar$'2016')),
rep(2017, length(calendar$'2017')), rep(2018, length(calendar$'2018')), rep(2019, length(calendar$'2019')))
female_results <- tibble(r2_itu_female, r2_glicko_female, tau_itu_female, tau_glicko_female, year)
tidy_female <- female_results %>% gather("metric", "score", -year)
year_summaries_female <- tidy_female %>%
filter(year  > 2012)  %>%
group_by(year, metric) %>%
summarize(average_score = mean(score))
# create and display plots
r2_female <- year_summaries_female %>% filter(metric == "r2_glicko_female" | metric == "r2_itu_female")
kendall_female <- year_summaries_female %>% filter(metric == "tau_glicko_female" | metric == "tau_itu_female")
r2_plot_female <- ggplot(r2_female) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average R2",
title = "R2 comparisons between ITU rankings and glicko scores- Female")
kendall_plot_female <- ggplot(kendall_female) + aes(x = year, y = average_score, colour = metric) +
geom_line() + coord_cartesian(ylim = c(0, 1)) +
labs(y = "Yearly average Kendall's Tau",
title = "Kendall's Tau comparisons between ITU rankings and glicko scores- Female")
grid.arrange(r2_plot_female, kendall_plot_female, nrow = 1)
