# Budapest
bd_df_10 <- read_csv("../data/2010_races/races/Budapest_men.csv", col_types = cols())
bd_ovo_10 <- read_csv("../data/2010_races/ovo_races/Budapest_men.csv", col_types = cols())
# List of races
races <- list(list(ty_df_09, ty_ovo_09, list(ws_df_09, ws_ovo_09), list(kz_df_09, kz_ovo_09),
list(hb_df_09, hb_ovo_09), list(ld_df_09, ld_ovo_09), list(yk_df_09, yk_ovo_09),
list(gc_df_09, gc_ovo_09), list(sd_df_10, sd_ovo_10), list(sl_df_10, sl_ovo_10),
list(md_df_10, md_ovo_10), list(hb_df_10, hb_ovo_10), list(ld_df_10, ld_ovo_10),
list(kz_df_10, kz_ovo_10), list(bd_df_10, bd_ovo_10))
# List of races
races <- list(list(ty_df_09, ty_ovo_09), list(ws_df_09, ws_ovo_09), list(kz_df_09, kz_ovo_09),
list(hb_df_09, hb_ovo_09), list(ld_df_09, ld_ovo_09), list(yk_df_09, yk_ovo_09),
list(gc_df_09, gc_ovo_09), list(sd_df_10, sd_ovo_10), list(sl_df_10, sl_ovo_10),
list(md_df_10, md_ovo_10), list(hb_df_10, hb_ovo_10), list(ld_df_10, ld_ovo_10),
list(kz_df_10, kz_ovo_10), list(bd_df_10, bd_ovo_10))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(janitor)
library(lubridate)
library(PlayerRatings)
source("../src/utils.R")
### Find optimal level of C
c_vec <- seq(1, 5, by=1)
# Period incrementer for races
average_results <- rep(NA, length(c_vec))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations
glicko <- glicko_ratings(ty_ovo)
rankings_df <- updated_rankings(glicko)
# This can be a vector as above
correlation_tracker <- rep(NA, length(races))
# iterate through each race
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
}
# Find the average kendall's tau at that level of C
average_results[iterator] <- correlation_tracker %>% mean()
iterator <- iterator + 1
}
### Find optimal level of C
c_vec <- seq(1, 5, by=1)
# Period incrementer for races
average_results <- rep(NA, length(c_vec))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race (explain this)
glicko <- glicko_ratings(ty_ovo_09)
rankings_df <- updated_rankings(glicko)
# This can be a vector as above
correlation_tracker <- rep(NA, length(races))
# iterate through each race
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
}
# Find the average kendall's tau at that level of C
average_results[iterator] <- correlation_tracker %>% mean()
iterator <- iterator + 1
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(janitor)
library(lubridate)
library(PlayerRatings)
source("../src/utils.R")
# Read in all rae results and one-vs-one race results
# 2009
# Tongyeong
ty_df_09 <- read_csv("../data/2009_races/races/Tongyeong_men.csv", col_types = cols())
ty_ovo_09 <- read_csv("../data/2009_races/ovo_races/Tongyeong_men.csv", col_types = cols())
# Madrid
md_df_09 <- read_csv("../data/2009_races/races/Madrid_men.csv", col_types = cols())
md_ovo_09 <- read_csv("../data/2009_races/ovo_races/Madrid_men.csv", col_types = cols())
# Washington
ws_df_09 <- read_csv("../data/2009_races/races/Washington_men.csv", col_types = cols())
ws_ovo_09 <- read_csv("../data/2009_races/ovo_races/Washington_men.csv", col_types = cols())
# Kitz
kz_df_09 <- read_csv("../data/2009_races/races/Kitz_men.csv", col_types = cols())
kz_ovo_09 <- read_csv("../data/2009_races/ovo_races/Kitz_men.csv", col_types = cols())
# Hamburg
hb_df_09 <- read_csv("../data/2009_races/races/Hamburg_men.csv", col_types = cols())
hb_ovo_09 <- read_csv("../data/2009_races/ovo_races/Hamburg_men.csv", col_types = cols())
# London
ld_df_09 <- read_csv("../data/2009_races/races/London_men.csv", col_types = cols())
ld_ovo_09 <- read_csv("../data/2009_races/ovo_races/London_men.csv", col_types = cols())
# Yokohama
yk_df_09 <- read_csv("../data/2009_races/races/Yokohama_men.csv", col_types = cols())
yk_ovo_09 <- read_csv("../data/2009_races/ovo_races/Yokohama_men.csv", col_types = cols())
# Gold Coast
gc_df_09 <- read_csv("../data/2009_races/races/Gold-coast_men.csv", col_types = cols())
gc_ovo_09 <- read_csv("../data/2009_races/ovo_races/Gold-coast_men.csv", col_types = cols())
# 2010
# Sydney
sd_df_10 <- read_csv("../data/2010_races/races/Sydney_men.csv", col_types = cols())
sd_ovo_10 <- read_csv("../data/2010_races/ovo_races/Sydney_men.csv", col_types = cols())
# Seoul
sl_df_10 <- read_csv("../data/2010_races/races/Seoul_men.csv", col_types = cols())
sl_ovo_10 <- read_csv("../data/2010_races/ovo_races/Seoul_men.csv", col_types = cols())
# Madrid
md_df_10 <- read_csv("../data/2010_races/races/Madrid_men.csv", col_types = cols())
md_ovo_10 <- read_csv("../data/2010_races/ovo_races/Madrid_men.csv", col_types = cols())
# Hamburg
hb_df_10 <- read_csv("../data/2010_races/races/Hamburg_men.csv", col_types = cols())
hb_ovo_10 <- read_csv("../data/2010_races/ovo_races/Hamburg_men.csv", col_types = cols())
# London
ld_df_10 <- read_csv("../data/2010_races/races/London_men.csv", col_types = cols())
ld_ovo_10 <- read_csv("../data/2010_races/ovo_races/London_men.csv", col_types = cols())
# Kitz
kz_df_10 <- read_csv("../data/2010_races/races/Kitz_men.csv", col_types = cols())
kz_ovo_10 <- read_csv("../data/2010_races/ovo_races/Kitz_men.csv", col_types = cols())
# Budapest
bd_df_10 <- read_csv("../data/2010_races/races/Budapest_men.csv", col_types = cols())
bd_ovo_10 <- read_csv("../data/2010_races/ovo_races/Budapest_men.csv", col_types = cols())
# List of races
races <- list(list(ty_df_09, ty_ovo_09), list(ws_df_09, ws_ovo_09), list(kz_df_09, kz_ovo_09),
list(hb_df_09, hb_ovo_09), list(ld_df_09, ld_ovo_09), list(yk_df_09, yk_ovo_09),
list(gc_df_09, gc_ovo_09), list(sd_df_10, sd_ovo_10), list(sl_df_10, sl_ovo_10),
list(md_df_10, md_ovo_10), list(hb_df_10, hb_ovo_10), list(ld_df_10, ld_ovo_10),
list(kz_df_10, kz_ovo_10), list(bd_df_10, bd_ovo_10))
### Find optimal level of C
c_vec <- seq(1, 5, by=1)
# Period incrementer for races
average_results <- rep(NA, length(c_vec))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race (explain this)
glicko <- glicko_ratings(ty_ovo_09)
rankings_df <- updated_rankings(glicko)
# This can be a vector as above
correlation_tracker <- rep(NA, length(races))
# iterate through each race
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
}
# Find the average kendall's tau at that level of C
average_results[iterator] <- correlation_tracker %>% mean()
iterator <- iterator + 1
}
results_summary <- tibble(c = c_vec, average_kendall_tau = average_results)
results_summary
best_c <- results_summary  %>% arrange(desc(average_kendall_tau)) %>% select(c) %>% head(1) %>% pull()
# reset glicko and correlations
glicko <- glicko_ratings(ty_ovo)
rankings_df <- updated_rankings(glicko)
# Track the kendall's tau between both approaches
tau_glicko <- rep(NA, length(races))
tau_itu <- rep(NA, length(races))
# iterate through each race
count <- 1
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko[count] <- update[[3]]
tau_itu[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
count <- count + 1
}
comparison_df <- tibble(race = c("madrid-09", "wash-09", "kitz-09",
"hamburg-09", "london-09", "yokohama-09",
"gold coast-09", "sydney-10", "seoul-10",
"madrid-10", "hamburg-10", "london-10",
"kitz-10", "budapest-10"),
glicko = tau_glicko, itu = tau_itu) %>%
gather(key = method, value = kendalls, -race)
comparison_df %>% ggplot() +
aes(x = factor(race,
level = c("madrid-09", "wash-09", "kitz-09",
"hamburg-09", "london-09", "yokohama-09",
"gold coast-09", "sydney-10", "seoul-10",
"madrid-10", "hamburg-10", "london-10",
"kitz-10", "budapest-10")),
y = kendalls, fill = method) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "race", y = "kendalls tau", title = "Comparison of rank orderings - 2009/2010")
best_c <- results_summary  %>% arrange(desc(average_kendall_tau)) %>% select(c) %>% head(1) %>% pull()
# reset glicko and correlations
glicko <- glicko_ratings(ty_ovo)
rankings_df <- updated_rankings(glicko)
# Track the kendall's tau between both approaches
tau_glicko <- rep(NA, length(races))
tau_itu <- rep(NA, length(races))
# iterate through each race
count <- 1
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko[count] <- update[[3]]
tau_itu[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
count <- count + 1
}
comparison_df <- tibble(race = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10"),
glicko = tau_glicko, itu = tau_itu) %>%
gather(key = method, value = kendalls, -race)
comparison_df %>% ggplot() +
aes(x = factor(race,
level = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10"))),
comparison_df %>% ggplot() +
aes(x = factor(race,
level = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10")),
y = kendalls, fill = method) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "race", y = "kendalls tau", title = "Comparison of rank orderings - 2009/2010")
comparison_df
best_c <- results_summary  %>% arrange(desc(average_kendall_tau)) %>% select(c) %>% head(1) %>% pull()
# reset glicko and correlations
glicko <- glicko_ratings(ty_ovo_09)
rankings_df <- updated_rankings(glicko)
# Track the kendall's tau between both approaches
tau_glicko <- rep(NA, length(races))
tau_itu <- rep(NA, length(races))
# iterate through each race
count <- 1
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko[count] <- update[[3]]
tau_itu[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
count <- count + 1
}
comparison_df <- tibble(race = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10"),
glicko = tau_glicko, itu = tau_itu) %>%
gather(key = method, value = kendalls, -race)
comparison_df
# List of races
races <- list(list(md_df_09, md_ovo_09), list(ws_df_09, ws_ovo_09), list(kz_df_09, kz_ovo_09),
list(hb_df_09, hb_ovo_09), list(ld_df_09, ld_ovo_09), list(yk_df_09, yk_ovo_09),
list(gc_df_09, gc_ovo_09), list(sd_df_10, sd_ovo_10), list(sl_df_10, sl_ovo_10),
list(md_df_10, md_ovo_10), list(hb_df_10, hb_ovo_10), list(ld_df_10, ld_ovo_10),
list(kz_df_10, kz_ovo_10), list(bd_df_10, bd_ovo_10))
best_c <- results_summary  %>% arrange(desc(average_kendall_tau)) %>% select(c) %>% head(1) %>% pull()
# reset glicko and correlations
glicko <- glicko_ratings(ty_ovo_09)
rankings_df <- updated_rankings(glicko)
# Track the kendall's tau between both approaches
tau_glicko <- rep(NA, length(races))
tau_itu <- rep(NA, length(races))
# iterate through each race
count <- 1
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko[count] <- update[[3]]
tau_itu[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
count <- count + 1
}
comparison_df <- tibble(race = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10"),
glicko = tau_glicko, itu = tau_itu) %>%
gather(key = method, value = kendalls, -race)
comparison_df
comparison_df %>% ggplot() +
aes(x = factor(race,
level = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10")),
y = kendalls, fill = method) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "race", y = "kendalls tau", title = "Comparison of rank orderings - 2009/2010")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(lubridate)
library(PlayerRatings)
source("../src/utils.R")
comparison_df %>% ggplot() +
aes(x = factor(race,
level = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10")),
y = kendalls, fill = method) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "race", y = "kendalls tau", title = "Comparison of rank orderings - 2009/2010")
comparison_df
comparison_df %>%
filter(race != 'gc-09`)
comparison_df %>%
filter(race != 'gc-09')
comparison_df %>%
filter(race != 'gc-09' | race != 'sl-10' | race!= 'bd-10')
comparison_df %>%
filter(race != 'gc-09' & race != 'sl-10' & race!= 'bd-10')
comparison_df %>%
filter(race != 'gc-09' & race != 'sl-10' & race!= 'bd-10') %>%
group_by(method) %>%
summarise(mean_kendalls = avg(kendalls))
comparison_df %>%
filter(race != 'gc-09' & race != 'sl-10' & race!= 'bd-10') %>%
group_by(method) %>%
summarise(mean_kendalls = mean(kendalls))
# Read in all rae results and one-vs-one race results
# 2009
# Tongyeong
ty_df_09 <- read_csv("../data/2009_races/races/Tongyeong_men.csv", col_types = cols())
ty_ovo_09 <- read_csv("../data/2009_races/ovo_races/Tongyeong_men.csv", col_types = cols())
# Madrid
md_df_09 <- read_csv("../data/2009_races/races/Madrid_men.csv", col_types = cols())
md_ovo_09 <- read_csv("../data/2009_races/ovo_races/Madrid_men.csv", col_types = cols())
# Washington
ws_df_09 <- read_csv("../data/2009_races/races/Washington_men.csv", col_types = cols())
ws_ovo_09 <- read_csv("../data/2009_races/ovo_races/Washington_men.csv", col_types = cols())
# Kitz
kz_df_09 <- read_csv("../data/2009_races/races/Kitz_men.csv", col_types = cols())
kz_ovo_09 <- read_csv("../data/2009_races/ovo_races/Kitz_men.csv", col_types = cols())
# Hamburg
hb_df_09 <- read_csv("../data/2009_races/races/Hamburg_men.csv", col_types = cols())
hb_ovo_09 <- read_csv("../data/2009_races/ovo_races/Hamburg_men.csv", col_types = cols())
# London
ld_df_09 <- read_csv("../data/2009_races/races/London_men.csv", col_types = cols())
ld_ovo_09 <- read_csv("../data/2009_races/ovo_races/London_men.csv", col_types = cols())
# Yokohama
yk_df_09 <- read_csv("../data/2009_races/races/Yokohama_men.csv", col_types = cols())
yk_ovo_09 <- read_csv("../data/2009_races/ovo_races/Yokohama_men.csv", col_types = cols())
# Gold Coast
gc_df_09 <- read_csv("../data/2009_races/races/Gold-coast_men.csv", col_types = cols())
gc_ovo_09 <- read_csv("../data/2009_races/ovo_races/Gold-coast_men.csv", col_types = cols())
# 2010
# Sydney
sd_df_10 <- read_csv("../data/2010_races/races/Sydney_men.csv", col_types = cols())
sd_ovo_10 <- read_csv("../data/2010_races/ovo_races/Sydney_men.csv", col_types = cols())
# Seoul
sl_df_10 <- read_csv("../data/2010_races/races/Seoul_men.csv", col_types = cols())
sl_ovo_10 <- read_csv("../data/2010_races/ovo_races/Seoul_men.csv", col_types = cols())
# Madrid
md_df_10 <- read_csv("../data/2010_races/races/Madrid_men.csv", col_types = cols())
md_ovo_10 <- read_csv("../data/2010_races/ovo_races/Madrid_men.csv", col_types = cols())
# Hamburg
hb_df_10 <- read_csv("../data/2010_races/races/Hamburg_men.csv", col_types = cols())
hb_ovo_10 <- read_csv("../data/2010_races/ovo_races/Hamburg_men.csv", col_types = cols())
# London
ld_df_10 <- read_csv("../data/2010_races/races/London_men.csv", col_types = cols())
ld_ovo_10 <- read_csv("../data/2010_races/ovo_races/London_men.csv", col_types = cols())
# Kitz
kz_df_10 <- read_csv("../data/2010_races/races/Kitz_men.csv", col_types = cols())
kz_ovo_10 <- read_csv("../data/2010_races/ovo_races/Kitz_men.csv", col_types = cols())
# Budapest
bd_df_10 <- read_csv("../data/2010_races/races/Budapest_men.csv", col_types = cols())
bd_ovo_10 <- read_csv("../data/2010_races/ovo_races/Budapest_men.csv", col_types = cols())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(lubridate)
library(PlayerRatings)
source("../src/utils.R")
# List of races
races <- list(list(md_df_09, md_ovo_09), list(ws_df_09, ws_ovo_09), list(kz_df_09, kz_ovo_09),
list(hb_df_09, hb_ovo_09), list(ld_df_09, ld_ovo_09), list(yk_df_09, yk_ovo_09),
list(gc_df_09, gc_ovo_09), list(sd_df_10, sd_ovo_10), list(sl_df_10, sl_ovo_10),
list(md_df_10, md_ovo_10), list(hb_df_10, hb_ovo_10), list(ld_df_10, ld_ovo_10),
list(kz_df_10, kz_ovo_10), list(bd_df_10, bd_ovo_10))
### Find optimal level of C
c_vec <- seq(5, 100, by=5)
# Period incrementer for races
average_results <- rep(NA, length(c_vec))
iterator <- 1
# DF to store results at different levels of c
# iterate through each c
for (c in c_vec){
# reset period
period <- 1
# reset glicko and correlations to the 1st race
glicko <- glicko_ratings(ty_ovo_09)
rankings_df <- updated_rankings(glicko)
correlation_tracker <- rep(NA, length(races))
# iterate through each race
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# adjust period for the glicko race objects
period <- period + 1
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c)
# save results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
correlation_tracker[period-1] <- update[[3]]
}
# Find the average kendall's tau at that level of C
average_results[iterator] <- correlation_tracker %>% mean()
iterator <- iterator + 1
}
results_summary <- tibble(c = c_vec, average_kendall_tau = average_results)
results_summary
best_c <- results_summary  %>% arrange(desc(average_kendall_tau)) %>% select(c) %>% head(1) %>% pull()
# reset glicko and correlations
glicko <- glicko_ratings(ty_ovo_09)
rankings_df <- updated_rankings(glicko)
# Track the kendall's tau between both approaches
tau_glicko <- rep(NA, length(races))
tau_itu <- rep(NA, length(races))
# iterate through each race
count <- 1
for (race in races){
race_df <- race[[1]]
race_ovo <- race[[2]]
# pass in rotating value of c
update <- race_update(glicko, rankings_df, race_df, race_ovo, c = best_c)
# pass in results from the update for use in next iteration
glicko <- update[[1]]
rankings_df <- update[[2]]
# just a list
tau_glicko[count] <- update[[3]]
tau_itu[count] <- cor(race_df$start_number, race_df$position, method = "kendall")
count <- count + 1
}
comparison_df <- tibble(race = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10"),
glicko = tau_glicko, itu = tau_itu) %>%
gather(key = method, value = kendalls, -race)
comparison_df %>% ggplot() +
aes(x = factor(race,
level = c("md-09", "ws-09", "kz-09",
"hb-09", "ld-09", "yk-09",
"gc-09", "sd-10", "sl-10",
"md-10", "hb-10", "ld-10",
"kz-10", "bd-10")),
y = kendalls, fill = method) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "race", y = "kendalls tau", title = "Comparison of rank orderings - 2009/2010")
comparison_df %>%
filter(race != 'gc-09' & race != 'sl-10' & race!= 'bd-10') %>%
group_by(method) %>%
summarise(mean_kendalls = mean(kendalls))
